---
import Layout from "@layouts/Layout.astro";
import Card from "@components/cards/Post.astro";
import Separator from "@components/feeds/Separator.astro";
import Send from "@components/actions/Send.astro";

const { user } = Astro.locals;
if (!user) return Astro.redirect("/login");

import {
  db,
  alias,
  eq,
  and,
  countDistinct,
  Post,
  User,
  Forum,
  Vote,
} from "astro:db";

const postId = parseInt(Astro.params.postId!);

const Upvote = alias(Vote, "upvote");
const Downvote = alias(Vote, "downvote");
const Voted = alias(Vote, "Voted");

const [post] = await db
  .select({
    postTitle: Post.title,
    postDescription: Post.description,
    postId: Post.id,
    userName: User.name,
    userId: User.id,
    forumName: Forum.name,
    forumId: Forum.id,
    upvotes: countDistinct(Upvote.userId),
    downvotes: countDistinct(Downvote.userId),
    votedScore: Voted.score,
  })
  .from(Post)
  .where(eq(Post.id, postId))
  .innerJoin(User, eq(Post.userId, User.id))
  .innerJoin(Forum, eq(Post.forumId, Forum.id))
  .leftJoin(Upvote, and(eq(Upvote.postId, Post.id), eq(Upvote.score, 1)))
  .leftJoin(Downvote, and(eq(Downvote.postId, Post.id), eq(Downvote.score, -1)))
  .leftJoin(
    Voted,
    and(
      eq(Voted.postId, Post.id),
      eq(Voted.userId, Astro.locals.user?.id ?? -1),
    ),
  )
  .groupBy(Post.id);
---

<Layout title={post.postTitle ?? "Post"}>
  <Card {...post} />
  <Separator />
  <form method="post" action={`/api/reply/${postId}`}>
    <textarea
      autofocus={true}
      rows={5}
      name="description"
      required="true"
      placeholder="Schreibe einen Kommentar..."></textarea>
    <Send />
  </form>
</Layout>

<style lang="scss">
  form {
    display: flex;
    flex-direction: column;
    gap: 0.5em;
  }
  textarea {
    width: 100%;
    background: var(--surface);
    color: var(--text);
  }
</style>
