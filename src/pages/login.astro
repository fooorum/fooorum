---
import Layout from "@layouts/Layout.astro";
import Stack from "@components/feeds/Stack.astro";
import { userNameValidator, passwordValidator } from "@lib/validate";
import { Icon } from "astro-icon/components";

const { user } = Astro.locals;
if (user) {
  return Astro.redirect("/logout");
}

const invalid = Astro.url.searchParams.has("invalid");
const leaked = Astro.url.searchParams.has("leaked");
const weak = Astro.url.searchParams.has("weak");
const username = Astro.url.searchParams.get("username");

const warnings: string[] = [];
if (invalid) {
  warnings.push("Passwort ist falsch");
}
if (leaked) {
  warnings.push("Passwort befindet sich in Ã¶ffentlichen Datenbanken");
}
if (weak) {
  warnings.push("Passwort ist zu schwach");
}
---

<Layout title="Anmelden oder Registrieren">
  <form method="post" action="/api/login" autocomplete="on" data-astro-reload>
    <Stack>
      <label for="username">Nutzername</label>
      <input
        id="username"
        name="username"
        required
        value={username}
        {...userNameValidator.toJSON()}
      />
      <label for="password">Passwort</label>
      <input
        id="password"
        name="password"
        type="password"
        required
        {...passwordValidator.toJSON()}
      />
      <progress id="password-progress" max="4" value="1"></progress>
      <span id="warnings">
        {warnings.map((warning) => <span>{warning}</span>)}
      </span>
      <span id="suggestions"></span>
      <button><Icon name="mdi:login" /> Anmelden oder registrieren</button>
    </Stack>
  </form>
</Layout>

<script>
  import zxcvbn from "zxcvbn";

  const passwordInput = document.getElementById("password") as HTMLInputElement;
  const passwordProgress = document.getElementById(
    "password-progress",
  ) as HTMLProgressElement;
  const suggestions = document.getElementById("suggestions") as HTMLSpanElement;

  passwordInput?.addEventListener("input", () => {
    const password = passwordInput.value;
    const passwordStrength = zxcvbn(password);
    passwordProgress.value = passwordStrength.score;
    suggestions.innerHTML = "";

    for (const suggestion of passwordStrength.feedback.suggestions) {
      const element = document.createElement("span");
      element.innerText = suggestion;
      suggestions.append(suggestion);
    }

    if (passwordStrength.score < 3) {
      passwordInput.setCustomValidity(passwordStrength.feedback.warning);
    }
  });
</script>

<style lang="scss">
  #warnings,
  #suggestsions {
    display: flex;
    gap: 0.5em;

    * {
      color: var(--accent);
    }
  }

  #password-progress {
    height: 0.5em;
  }

  #password-progress[value="1"] {
    &::-moz-progress-bar,
    &::-webkit-progress-value {
      background-color: red;
    }
  }
  #password-progress[value="2"] {
    &::-moz-progress-bar,
    &::-webkit-progress-value {
      background-color: orange;
    }
  }
  #password-progress[value="3"] {
    &::-moz-progress-bar,
    &::-webkit-progress-value {
      background-color: yellow;
    }
  }
  #password-progress[value="4"] {
    &::-moz-progress-bar,
    &::-webkit-progress-value {
      background-color: green;
    }
  }
</style>
