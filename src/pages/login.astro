---
import Layout from "@layouts/Layout.astro";
import Stack from "@components/feeds/Stack.astro";
import { userNameValidator, passwordValidator } from "@lib/validate";
import { Icon } from "astro-icon/components";

const { user } = Astro.locals;
if (user) {
  return Astro.redirect("/logout");
}

const invalid = Astro.url.searchParams.has("invalid");
const breaches = parseInt(Astro.url.searchParams.get("breaches") ?? "0");
const weak = Astro.url.searchParams.has("weak");
const username = Astro.url.searchParams.get("username");

const warnings: string[] = [];
if (invalid) {
  warnings.push("Passwort ist falsch");
}
if (weak) {
  warnings.push("Passwort ist zu schwach");
}
if (breaches) {
  warnings.push(
    `Passwort befindet sich in ${breaches} Datenbank${breaches === 1 ? "" : "en"}`,
  );
}
---

<Layout title="Anmelden oder Registrieren">
  <form method="post" action="/api/login" autocomplete="on" data-astro-reload>
    <Stack>
      <label for="username">Nutzername</label>
      <input
        id="username"
        name="username"
        required
        value={username}
        {...userNameValidator.toJSON()}
      />
      <label for="password">Passwort</label>
      <input
        id="password"
        name="password"
        type="password"
        required
        {...passwordValidator.toJSON()}
      />
      <progress id="password-progress" max="5" value="1"></progress>
      <span id="warnings">
        {warnings.map((warning) => <span class="warning">{warning}</span>)}
      </span>
      <span id="suggestions"></span>
      <button>
        <Icon id="login-button" name="material-symbols:login" /> Anmelden oder registrieren
      </button>
    </Stack>
  </form>
</Layout>

<script>
  import zxcvbn from "zxcvbn";
  import { getBreaches } from "@lib/haveIBeenPwned";

  const passwordInput = document.getElementById("password") as HTMLInputElement;
  const passwordProgress = document.getElementById(
    "password-progress",
  ) as HTMLProgressElement;
  const warningsWrapper = document.getElementById(
    "warnings",
  ) as HTMLSpanElement;
  const suggestionsWrapper = document.getElementById(
    "suggestions",
  ) as HTMLSpanElement;
  const loginButton = document.getElementById(
    "login-button",
  ) as HTMLButtonElement;

  let timeout: NodeJS.Timeout;

  passwordInput?.addEventListener("input", () => {
    const rating = zxcvbn(passwordInput.value);
    const feedback = rating.feedback;
    passwordProgress.value = rating.score + 1;
    showSuggestions(...feedback.suggestions);

    const warning =
      feedback.warning !== "" ? feedback.warning : "Passwort ist zu schwach";

    clearWarning(true);
    if (rating.score < 4) showWarning(warning);

    clearTimeout(timeout);
    timeout = setTimeout(checkBreaches, 2000);
  });

  async function checkBreaches() {
    const breaches = await getBreaches(passwordInput.value);
    if (breaches > 0) {
      const warning = `Passwort befindet sich in ${breaches} Datenbank${breaches === 1 ? "" : "en"}`;
      showWarning(warning);
      passwordProgress.value = Math.max(
        passwordProgress.value - Math.log10(breaches),
        1,
      );
      passwordInput.setCustomValidity(warning);
    } else clearWarning();
  }

  function showWarning(warning: string) {
    const element = document.createElement("span");
    element.innerText = warning;
    element.className = "warning";
    loginButton.disabled = true;
    passwordInput.setCustomValidity(warning);
    passwordInput.reportValidity();
  }

  function clearWarning(clearPrevious = false) {
    if (clearPrevious) warningsWrapper.innerHTML = "";
    loginButton.disabled = false;
    passwordInput.setCustomValidity("");
    passwordInput.reportValidity();
  }

  function showSuggestions(...suggestions: string[]) {
    suggestionsWrapper.innerHTML = "";
    for (const suggestion of suggestions) {
      const element = document.createElement("span");
      element.innerText = suggestion;
      element.className = "suggestion";
      suggestionsWrapper.append(element);
    }
  }
</script>

<style lang="scss">
  #warnings,
  #suggestions {
    display: flex;
    flex-direction: column;
    gap: 0.5em;
  }

  #password-progress {
    height: 0.5em;
  }

  #password-progress[value="1"] {
    &::-moz-progress-bar,
    &::-webkit-progress-value {
      background-color: red;
    }
  }
  #password-progress[value="2"] {
    &::-moz-progress-bar,
    &::-webkit-progress-value {
      background-color: orangered;
    }
  }
  #password-progress[value="3"] {
    &::-moz-progress-bar,
    &::-webkit-progress-value {
      background-color: orange;
    }
  }
  #password-progress[value="4"] {
    &::-moz-progress-bar,
    &::-webkit-progress-value {
      background-color: yellow;
    }
  }
  #password-progress[value="5"] {
    &::-moz-progress-bar,
    &::-webkit-progress-value {
      background-color: green;
    }
  }
</style>

<style is:global lang="scss">
  .warning {
    color: var(--error);
  }
  .suggestion {
    color: var(--accent);
  }
</style>
