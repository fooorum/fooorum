---
import Layout from "@layouts/Layout.astro";
import Stack from "@components/feeds/Stack.astro";
import { Icon } from "astro-icon/components";
import { inputProps } from "@lib/zod/forms/inputProps";
import { loginForm } from "@lib/zod/schemata";

const { user } = Astro.locals;
if (user) return Astro.redirect("/account");
const invalid = Astro.url.searchParams.has("invalid");

const usernameInputProps = inputProps({
  name: "username",
  type: loginForm.shape.username,
});
const passwordInputProps = inputProps({
  name: "password",
  type: loginForm.shape.password,
});
passwordInputProps.type = "password";
---

<Layout title="Anmelden oder Registrieren">
  <form
    method="post"
    action="/api/account/login"
    autocomplete="on"
    data-astro-reload
  >
    <Stack>
      <label for="username-input">Nutzername</label>
      <input id="username-input" autofocus {...usernameInputProps} />
      <label for="password-input">Passwort</label>
      <div id="password">
        <input id="password-input" {...passwordInputProps} />
        <button type="button" id="visibility-toggle">
          <span id="visibility" hidden>
            <Icon name="material-symbols:visibility" />
          </span>
          <span id="visibility-off">
            <Icon name="material-symbols:visibility-off" />
          </span>
        </button>
      </div>
      <div id="issues">
        {invalid && <span>Password is invalid</span>}
      </div>
      <button>
        <Icon name="material-symbols:login" /> Anmelden oder registrieren
      </button>
    </Stack>
  </form>
</Layout>

<script>
  import { fromZodError } from "@lib/i18n/zod-validation-error";
  import { strongPassword, securePassword } from "@lib/zod/schemata/password";

  const passwordInput = document.getElementById(
    "password-input",
  ) as HTMLInputElement;
  const issuesWrapper = document.getElementById("issues") as HTMLSpanElement;
  const visibilityToggle = document.getElementById(
    "visibility-toggle",
  ) as HTMLButtonElement;
  const visibility = document.getElementById("visibility")!;
  const visibilityOff = document.getElementById("visibility-off")!;

  visibilityToggle.addEventListener("click", () => {
    if (passwordInput.type === "text") {
      passwordInput.type = "password";
      visibility.hidden = true;
      visibilityOff.hidden = false;
    } else {
      passwordInput.type = "text";
      visibility.hidden = false;
      visibilityOff.hidden = true;
    }
  });

  let timeout: NodeJS.Timeout;
  passwordInput?.addEventListener("input", async () => {
    await checkPasswordSchema(strongPassword);

    clearTimeout(timeout);
    timeout = setTimeout(() => checkPasswordSchema(securePassword), 2000);
  });

  async function checkPasswordSchema(
    schema: typeof strongPassword | typeof securePassword,
  ) {
    const { success, error } = await schema.safeParseAsync(passwordInput.value);
    if (!success) {
      issuesWrapper.innerHTML = "";
      for (const issue of error.issues) {
        const element = document.createElement("span");
        element.innerText = issue.message;
        issuesWrapper.append(element);
      }
      passwordInput.setCustomValidity(fromZodError(error).toString());
    } else {
      issuesWrapper.innerHTML = "";
      passwordInput.setCustomValidity("");
    }
  }
</script>

<style lang="scss">
  #issues {
    display: flex;
    flex-direction: column;
    gap: 0.5em;
    color: var(--error);
  }

  #password {
    display: flex;
  }

  #password-input {
    flex-grow: 1;
  }
</style>
