---
import Stack from "@components/feeds/Stack.astro";
import Card from "@components/cards/Post.astro";
import Separator from "./Separator.astro";
import {
  and,
  eq,
  sum,
  isNull,
  asc,
  desc,
  Post,
  Vote,
  countDistinct,
  TRUE,
  ne,
} from "astro:db";
import { Comment, selectPosts } from "@lib/db";
import { Icon } from "astro-icon/components";

interface Props {
  forum?: number;
  user?: number;
}

const { forum, user } = Astro.props;
const { searchParams } = Astro.url;
const sortParam = searchParams.get("sort") ?? "created";
const sorts = {
  created: Post.createdAt,
  title: Post.title,
  id: Post.id,
  comments: countDistinct(Comment.id),
  votes: sum(Vote.score),
};
const sortNames: Record<string, string> = {
  created: "Erstellt",
  title: "Titel",
  id: "Index",
  comments: "Kommentare",
  votes: "Bewertungen",
};
// @ts-expect-error
const sort = sorts[sortParam];
const orderParam = searchParams.get("order") ?? "desc";
const orders = { asc, desc };
const orderNames: Record<string, string> = {
  asc: "Aufsteigend",
  desc: "Absteigend",
};
// @ts-expect-error
const order = orders[orderParam];

const filters = [isNull(Post.parentId), ne(Post.isDeleted, TRUE)];
if (forum !== undefined) filters.push(eq(Post.forumId, forum));
if (user !== undefined) filters.push(eq(Post.userId, user));

const posts = await selectPosts({ userId: Astro.locals.user?.id })
  .where(and(...filters))
  .orderBy(order(sort));
---

<form>
  <select name="sort">
    {
      Object.keys(sorts).map((s) => (
        <option selected={s === sortParam} value={s}>
          {sortNames[s]}
        </option>
      ))
    }
  </select>
  <select name="order">
    {
      Object.keys(orders).map((o) => (
        <option selected={o === orderParam} value={o}>
          {orderNames[o]}
        </option>
      ))
    }
  </select>
  <button type="submit">
    <Icon name="material-symbols:send" title="Sortieren" /> Sortieren
  </button>
</form>
<Stack>
  {
    posts
      .flatMap((post) => [<Card {...post} />, <Separator id={post.postId} />])
      .slice(0, -1)
  }
</Stack>
