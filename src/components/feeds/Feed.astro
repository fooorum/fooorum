---
import Stack from "@components/feeds/Stack.astro";
import Card from "@components/cards/Post.astro";
import Separator from "./Separator.astro";
import {
  db,
  and,
  eq,
  isNull,
  asc,
  desc,
  Post,
  User,
  Forum,
  countDistinct,
} from "astro:db";
import { Upvote, Downvote, Voted, Comment } from "@lib/db";

interface Props {
  forum?: number;
  user?: number;
}
const { forum, user } = Astro.props;
const { searchParams } = Astro.url;
const sortParam = searchParams.get("sort");
const sort =
  { created: Post.createdAt, title: Post.title, id: Post.id }[sortParam!] ??
  Post.createdAt;
const orderParam = searchParams.get("order");
const order = { asc, desc }[orderParam!] ?? desc;

const filters = [isNull(Post.parentId)];
if (forum !== undefined) filters.push(eq(Post.forumId, forum));
if (user !== undefined) filters.push(eq(Post.userId, user));

const posts = await db
  .select({
    postTitle: Post.title,
    postDescription: Post.description,
    postId: Post.id,
    userName: User.name,
    userId: User.id,
    forumName: Forum.name,
    forumId: Forum.id,
    upvotes: countDistinct(Upvote.userId),
    downvotes: countDistinct(Downvote.userId),
    votedScore: Voted.score,
    comments: countDistinct(Comment.id),
  })
  .from(Post)
  .where(and(...filters))
  .orderBy(order(sort))
  .innerJoin(User, eq(Post.userId, User.id))
  .innerJoin(Forum, eq(Post.forumId, Forum.id))
  .leftJoin(Upvote, and(eq(Upvote.postId, Post.id), eq(Upvote.score, 1)))
  .leftJoin(Downvote, and(eq(Downvote.postId, Post.id), eq(Downvote.score, -1)))
  .leftJoin(
    Voted,
    and(
      eq(Voted.postId, Post.id),
      eq(Voted.userId, Astro.locals.user?.id ?? -1),
    ),
  )
  .leftJoin(Comment, eq(Comment.parentId, Post.id))
  .groupBy(Post.id);
---

<Stack>
  {
    posts
      .flatMap((post) => [<Card {...post} />, <Separator id={post.postId} />])
      .slice(0, -1)
  }
</Stack>
