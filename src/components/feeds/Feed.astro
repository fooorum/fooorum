---
import Stack from "@components/feeds/Stack.astro";
import Select, {
  getSelected,
  type Selection,
} from "@components/feeds/Select.astro";
import Search, { getQuery, type Query } from "./Search.astro";
import Separator from "@components/feeds/Separator.astro";
import Card from "@components/cards/Post.astro";
import { selectPosts } from "@lib/db";
import type { SQLWrapper } from "drizzle-orm/sql";
import {
  and,
  or,
  eq,
  sql,
  like,
  asc,
  desc,
  Post,
  Vote,
  countDistinct,
  TRUE,
  ne,
  Comment,
} from "astro:db";
import { Icon } from "astro-icon/components";

interface Props {
  forum?: number;
  user?: number;
}

const pageSize = 10;
const indexStr = Astro.url.searchParams.get("i");
const index = indexStr && /[0-9]+/.test(indexStr) ? parseInt(indexStr) : 0;
const nextUrl = new URL(Astro.url);
const prevUrl = new URL(Astro.url);
nextUrl.searchParams.set("i", `${index + pageSize}`);
prevUrl.searchParams.set("i", `${Math.max(0, index - pageSize)}`);

const { forum, user } = Astro.props;

const search: Query = { param: "q" };

const query = getQuery(search, Astro.url);
const filters = [ne(Post.deleted, TRUE)];
if (query?.length)
  filters.push(
    or(like(Post.title, `%${query}%`), like(Post.description, `%${query}%`))!,
  );
if (forum !== undefined) filters.push(eq(Post.forumId, forum));
if (user !== undefined) filters.push(eq(Post.userId, user));

const sortSelection: Selection<any> = {
  param: "s",
  default: "created",
  options: [
    { name: "Erstellt", id: "created", value: Post.createdAt },
    { name: "Titel", id: "title", value: Post.title },
    { name: "Index", id: "id", value: Post.id },
    { name: "Kommentare", id: "comments", value: countDistinct(Comment.id) },
    { name: "Bewertungen", id: "votes", value: sql`total(${Vote.score})` },
  ],
};

const orderSelection: Selection<typeof asc | typeof desc> = {
  param: "o",
  default: "desc",
  options: [
    { name: "Aufsteigend", id: "asc", value: asc },
    { name: "Absteigend", id: "desc", value: desc },
  ],
};

const sort = getSelected(sortSelection, Astro.url).value;
const order = getSelected(orderSelection, Astro.url).value;

const posts = await selectPosts({ userId: Astro.locals.user?.id })
  .where(and(...filters))
  .orderBy(order(sort))
  .limit(pageSize)
  .offset(index);
---

<form class="bar">
  <Search {...search} />
  <div class="sort">
    <Select {...sortSelection} />
    <Select {...orderSelection} />
  </div>
  <button type="submit">
    <Icon name="material-symbols:send" title="Anwenden" /> Anwenden
  </button>
</form>
<Stack>
  {
    posts
      .flatMap((post) => [<Card {...post} />, <Separator id={post.id} />])
      .slice(0, -1)
  }
  {!posts.length && "Es wurden keine Beiträge gefunden."}
</Stack>

<div class="pagination-nav">
  <a href={prevUrl}>{index > 0 && "Zurück"}</a>
  <a href={nextUrl}>{posts.length === pageSize && "Weiter"}</a>
</div>

<style>
  .bar,
  .sort {
    display: flex;
    gap: 0.5em;
  }

  .bar {
    padding: 0.5em;
    flex-wrap: wrap;
  }

  .pagination-nav {
    display: flex;
    padding: 0.5em;
    justify-content: space-between;
  }
</style>
