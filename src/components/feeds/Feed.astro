---
import Stack from "@components/feeds/Stack.astro";
import Selections from "@components/feeds/Selections.astro";
import Select, {
  getSelected,
  type Selection,
} from "@components/feeds/Select.astro";
import Separator from "@components/feeds/Separator.astro";
import {
  and,
  eq,
  sum,
  isNull,
  asc,
  desc,
  Post,
  Vote,
  countDistinct,
  TRUE,
  ne,
} from "astro:db";
import Card from "@components/cards/Post.astro";
import { Comment, selectPosts } from "@lib/db";
import type { SQLWrapper } from "drizzle-orm/sql";

interface Props {
  forum?: number;
  user?: number;
}

const { forum, user } = Astro.props;

const filters = [isNull(Post.parentId), ne(Post.isDeleted, TRUE)];
if (forum !== undefined) filters.push(eq(Post.forumId, forum));
if (user !== undefined) filters.push(eq(Post.userId, user));

const sortSelection: Selection<SQLWrapper> = {
  param: "sort",
  default: "created",
  options: [
    { name: "Erstellt", id: "created", value: Post.createdAt },
    { name: "Titel", id: "title", value: Post.title },
    { name: "Index", id: "id", value: Post.id },
    { name: "Kommentare", id: "comments", value: countDistinct(Comment.id) },
    { name: "Bewertungen", id: "votes", value: sum(Vote.score) },
  ],
};

const orderSelection: Selection<typeof asc | typeof desc> = {
  param: "order",
  default: "desc",
  options: [
    { name: "Aufsteigend", id: "asc", value: asc },
    { name: "Absteigend", id: "desc", value: desc },
  ],
};

const sort = getSelected(sortSelection, Astro.url).value;
const order = getSelected(orderSelection, Astro.url).value;

const posts = await selectPosts({ userId: Astro.locals.user?.id })
  .where(and(...filters))
  .orderBy(order(sort));
---

<Selections>
  <Select {...sortSelection} />
  <Select {...orderSelection} />
</Selections>
<Stack>
  {
    posts
      .flatMap((post) => [<Card {...post} />, <Separator id={post.postId} />])
      .slice(0, -1)
  }
</Stack>
